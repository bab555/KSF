"""
K模块的数据结构定义
"""

from typing import List, Dict, Any, Optional
from dataclasses import dataclass, field


@dataclass
class KnowledgeItem:
    """Represents a single chunk of knowledge from the knowledge base."""
    id: str
    content: str
    score: float = 0.0 # Generic score, used for initial similarity
    source: str = "knowledge_base"
    metadata: Dict[str, Any] = field(default_factory=dict)

    def to_dict(self):
        return {
            "id": self.id,
            "content": self.content,
            "score": self.score,
            "source": self.source,
            "metadata": self.metadata,
        }


@dataclass
class RerankedItem:
    """Represents a knowledge item after the reranking process."""
    id: str
    content: str
    final_score: float
    original_similarity: float
    pagerank_weight: float

    def to_dict(self):
        return {
            "id": self.id,
            "content": self.content,
            "final_score": self.final_score,
            "original_similarity": self.original_similarity,
            "pagerank_weight": self.pagerank_weight
        }


@dataclass
class HiddenAssociation:
    """Represents a discovered link between a direct knowledge item and another item."""
    related_concept: str
    association_type: str  # 'semantic', 'causal', 'comparative', etc.
    strength: float
    explanation: str
    metadata: Dict[str, Any] = None


@dataclass
class KnowledgePacket:
    """K模块输出的结构化知识包"""
    query: str
    direct_knowledge: List[KnowledgeItem]
    hidden_associations: List[HiddenAssociation]
    attention_weights: Dict[str, float]
    processing_metadata: Dict[str, Any] = None
    
    def to_dict(self) -> Dict[str, Any]:
        """转换为字典格式，便于S模块处理"""
        return {
            'query': self.query,
            'direct_knowledge': [
                {
                    'content': item.content,
                    'source': item.source,
                    'relevance_score': item.relevance_score,
                    'metadata': item.metadata or {}
                }
                for item in self.direct_knowledge
            ],
            'hidden_associations': [
                {
                    'related_concept': assoc.related_concept,
                    'association_type': assoc.association_type,
                    'strength': assoc.strength,
                    'explanation': assoc.explanation,
                    'metadata': assoc.metadata or {}
                }
                for assoc in self.hidden_associations
            ],
            'attention_weights': self.attention_weights,
            'processing_metadata': self.processing_metadata or {}
        }


@dataclass
class RetrievalInstruction:
    """
    An instruction packet generated by the S-Module to guide the K-Module's retrieval process.
    This allows for more complex, multi-step knowledge acquisition strategies.
    
    Modes:
    - 'SEMANTIC': Standard vector similarity search.
    - 'FILTER_BASED': Retrieve all items from a category and then filter by metadata.
    - 'KEYWORD': A simpler keyword search (future use).
    - 'HYBRID': Combination of semantic and filter (future use).
    """
    mode: str = 'SEMANTIC'
    query_text: Optional[str] = None
    filters: Optional[Dict[str, Any]] = None
    entities: Optional[List[Dict[str, str]]] = None 