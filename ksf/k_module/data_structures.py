"""
K模块的数据结构定义
"""

from typing import List, Dict, Any, Optional
from dataclasses import dataclass, field


@dataclass
class KnowledgeItem:
    """Represents a single chunk of knowledge from the knowledge base."""
    id: str
    content: str
    score: float = 0.0 # Generic score, used for initial similarity
    source: str = "knowledge_base"
    metadata: Dict[str, Any] = field(default_factory=dict)

    def to_dict(self):
        return {
            "id": self.id,
            "content": self.content,
            "score": self.score,
            "source": self.source,
            "metadata": self.metadata,
        }


@dataclass
class RerankedItem:
    """Represents a knowledge item after the reranking process."""
    id: str
    content: str
    final_score: float
    original_similarity: float
    pagerank_weight: float

    def to_dict(self):
        return {
            "id": self.id,
            "content": self.content,
            "final_score": self.final_score,
            "original_similarity": self.original_similarity,
            "pagerank_weight": self.pagerank_weight
        }


@dataclass
class EmergedConcept:
    """
    Represents a concept that "emerged" from the semantic space during resonance.
    It's not from the original knowledge base but is highly relevant.
    """
    concept: str
    score: float

    def to_dict(self):
        return {"concept": self.concept, "score": self.score}


@dataclass
class ResonancePacket:
    """
    The final output packet from the K-Module in the Unified Resonance Framework.
    It can contain up to three types of information, based on the sources used
    to build the index.
    """
    primary_atoms: List[RerankedItem] = field(default_factory=list)
    context_atoms: List[RerankedItem] = field(default_factory=list)
    emerged_concepts: List[EmergedConcept] = field(default_factory=list)

    def to_dict(self):
        return {
            "primary_atoms": [atom.to_dict() for atom in self.primary_atoms],
            "context_atoms": [atom.to_dict() for atom in self.context_atoms],
            "emerged_concepts": [concept.to_dict() for concept in self.emerged_concepts]
        }

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'ResonancePacket':
        """Creates a ResonancePacket instance from a dictionary."""
        primary = [RerankedItem(**atom) for atom in data.get('primary_atoms', [])]
        context = [RerankedItem(**atom) for atom in data.get('context_atoms', [])]
        concepts = [EmergedConcept(**concept) for concept in data.get('emerged_concepts', [])]
        return cls(primary_atoms=primary, context_atoms=context, emerged_concepts=concepts)


@dataclass
class RetrievalInstruction:
    """
    An instruction packet generated by the S-Module to guide the K-Module's retrieval process.
    This allows for more complex, multi-step knowledge acquisition strategies.
    
    Modes:
    - 'SEMANTIC': Standard vector similarity search.
    - 'FILTER_BASED': Retrieve all items from a category and then filter by metadata.
    - 'KEYWORD': A simpler keyword search (future use).
    - 'HYBRID': Combination of semantic and filter (future use).
    """
    mode: str = 'SEMANTIC'
    query_text: Optional[str] = None
    filters: Optional[Dict[str, Any]] = None
    entities: Optional[List[Dict[str, str]]] = None 